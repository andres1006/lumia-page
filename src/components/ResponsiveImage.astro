---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  sizes?: string;
  breakpoints?: {
    sm?: number;
    md?: number;
    lg?: number;
    xl?: number;
  };
}

const { 
  src, 
  alt, 
  width, 
  height, 
  class: className, 
  loading = 'lazy', 
  sizes = '100vw',
  breakpoints = { sm: 640, md: 768, lg: 1024, xl: 1280 }
} = Astro.props;

// Generar rutas optimizadas
const baseName = src.replace(/\.[^/.]+$/, '');
const optimizedBasePath = baseName.replace('/img-lumia/', '/optimized-images/img-lumia/');

// Generar srcset para diferentes tamaÃ±os
const generateSrcSet = (format: string) => {
  const sizes = [
    { width: breakpoints.sm, suffix: '-sm' },
    { width: breakpoints.md, suffix: '-md' },
    { width: breakpoints.lg, suffix: '-lg' },
    { width: breakpoints.xl, suffix: '-xl' }
  ];
  
  return sizes.map(size => 
    `${optimizedBasePath}${size.suffix}.${format} ${size.width}w`
  ).join(', ');
};
---

<picture>
  <!-- WebP con srcset responsive -->
  <source
    type="image/webp"
    srcset={generateSrcSet('webp')}
    sizes={sizes}
  />
  
  <!-- JPEG con srcset responsive -->
  <source
    type="image/jpeg"
    srcset={generateSrcSet('jpg')}
    sizes={sizes}
  />
  
  <!-- Fallback -->
  <img
    src={`${optimizedBasePath}-optimized.jpg`}
    alt={alt}
    width={width}
    height={height}
    class={className}
    loading={loading}
    decoding="async"
  />
</picture>

<style>
  img {
    max-width: 100%;
    height: auto;
    display: block;
  }
  
  picture {
    display: block;
  }
</style>
