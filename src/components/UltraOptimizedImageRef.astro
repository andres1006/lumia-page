---
// Componente de Imagen Ultra-Optimizada con Referencias Actualizadas
// Utiliza las imágenes generadas por el script de optimización por lotes

export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: "lazy" | "eager";
  priority?: boolean;
  sizes?: string;
  quality?: "low" | "medium" | "high" | "ultra";
  aspectRatio?: string;
  placeholder?: "blur" | "color" | "none";
  blurDataURL?: string;
}

const {
  src,
  alt,
  width,
  height,
  class: className,
  loading = "lazy",
  priority = false,
  sizes = "100vw",
  quality = "high",
  aspectRatio,
  placeholder = "blur",
  blurDataURL,
} = Astro.props;

// Mapear rutas a las imágenes ultra-optimizadas
const getUltraOptimizedPath = (originalSrc: string) => {
  // Si ya es una ruta optimizada de img-lumia, convertir a ultra-optimizada
  if (originalSrc.includes("optimized-images/img-lumia/")) {
    return originalSrc.replace(
      "optimized-images/img-lumia/",
      "optimized-images/img-lumia-ultra/"
    );
  }

  // Si es una ruta optimizada de doctores, convertir a ultra-optimizada
  if (originalSrc.includes("optimized-images/drs/")) {
    return originalSrc.replace(
      "optimized-images/drs/",
      "optimized-images/drs-ultra/"
    );
  }

  // Si es una ruta original de img-lumia, convertir a ultra-optimizada
  if (originalSrc.includes("/img-lumia/")) {
    return originalSrc.replace(
      "/img-lumia/",
      "/optimized-images/img-lumia-ultra/"
    );
  }

  // Si es una ruta original de doctores, convertir a ultra-optimizada
  if (originalSrc.includes("/drs/")) {
    return originalSrc.replace("/drs/", "/optimized-images/drs-ultra/");
  }

  return originalSrc;
};

// Generar rutas ultra-optimizadas
const baseName = src.replace(/\.[^/.]+$/, "");
const ultraOptimizedBasePath = getUltraOptimizedPath(baseName);

// Tamaños responsive disponibles (coinciden con los generados por el script)
const responsiveSizes = {
  xs: 320,
  sm: 640,
  md: 768,
  lg: 1024,
  xl: 1280,
};

// Generar srcset para diferentes formatos y tamaños
const generateSrcSet = (format: string) => {
  return Object.entries(responsiveSizes)
    .map(
      ([size, width]) => `${ultraOptimizedBasePath}-${size}.${format} ${width}w`
    )
    .join(", ");
};

// Generar sizes attribute inteligente
const generateSizes = () => {
  if (sizes !== "100vw") return sizes;

  return "(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, 25vw";
};

// Generar placeholder blur
const generateBlurPlaceholder = () => {
  if (blurDataURL) return blurDataURL;

  // Generar un placeholder SVG base64
  const svg = `
    <svg width="${width || 400}" height="${height || 300}" xmlns="http://www.w3.org/2000/svg">
      <rect width="100%" height="100%" fill="#f3f4f6"/>
      <text x="50%" y="50%" text-anchor="middle" dy=".3em" fill="#9ca3af" font-family="system-ui" font-size="14">
        Cargando...
      </text>
    </svg>
  `;

  return `data:image/svg+xml;base64,${Buffer.from(svg).toString("base64")}`;
};

const sizesAttr = generateSizes();
const blurPlaceholder =
  placeholder === "blur" ? generateBlurPlaceholder() : undefined;
---

<picture class={`ultra-optimized-image ${className || ""}`}>
  <!-- AVIF (mejor compresión, navegadores modernos) -->
  <source type="image/avif" srcset={generateSrcSet("avif")} sizes={sizesAttr} />

  <!-- WebP (buena compresión, amplio soporte) -->
  <source type="image/webp" srcset={generateSrcSet("webp")} sizes={sizesAttr} />

  <!-- JPEG optimizado (fallback) -->
  <img
    src={`${ultraOptimizedBasePath}-md.jpg`}
    srcset={generateSrcSet("jpg")}
    sizes={sizesAttr}
    alt={alt}
    width={width}
    height={height}
    class={className}
    loading={priority ? "eager" : loading}
    decoding="async"
    fetchpriority={priority ? "high" : "auto"}
    style={aspectRatio ? `aspect-ratio: ${aspectRatio};` : undefined}
    data-blur-placeholder={blurPlaceholder}
  />
</picture>

<!-- Preload para imágenes críticas -->
{
  priority && (
    <link
      rel="preload"
      as="image"
      href={`${ultraOptimizedBasePath}-lg.avif`}
      type="image/avif"
    />
  )
}

<style>
  .ultra-optimized-image {
    display: block;
    max-width: 100%;
    height: auto;
  }

  .ultra-optimized-image img {
    width: 100%;
    height: auto;
    object-fit: cover;
  }

  /* Placeholder blur effect */
  .ultra-optimized-image img[data-blur-placeholder] {
    filter: blur(5px);
    transition: filter 0.3s ease;
  }

  .ultra-optimized-image img[data-blur-placeholder]:not([src=""]) {
    filter: blur(0);
  }

  /* Aspect ratio container */
  .ultra-optimized-image[style*="aspect-ratio"] {
    position: relative;
    overflow: hidden;
  }

  .ultra-optimized-image[style*="aspect-ratio"] img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* Loading skeleton */
  .ultra-optimized-image:not([data-loaded]) {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }

  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .ultra-optimized-image img {
      max-height: 50vh;
    }
  }
</style>

<script>
  // Lazy loading inteligente con Intersection Observer
  if (typeof window !== "undefined") {
    const images = document.querySelectorAll(
      '.ultra-optimized-image img[loading="lazy"]'
    );

    if ("IntersectionObserver" in window) {
      const imageObserver = new IntersectionObserver(
        (entries, observer) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const img = entry.target as HTMLImageElement;

              // Cargar la mejor imagen disponible
              const picture = img.closest("picture");
              if (picture) {
                const sources = picture.querySelectorAll("source");
                sources.forEach((source) => {
                  if (
                    source.type === "image/avif" &&
                    "avif" in HTMLImageElement.prototype
                  ) {
                    img.src = source.srcset.split(",")[0].split(" ")[0];
                  } else if (
                    source.type === "image/webp" &&
                    "webp" in HTMLImageElement.prototype
                  ) {
                    img.src = source.srcset.split(",")[0].split(" ")[0];
                  }
                });
              }

              // Remover placeholder blur
              if (img.dataset.blurPlaceholder) {
                img.addEventListener("load", () => {
                  img.style.filter = "none";
                  img.removeAttribute("data-blur-placeholder");
                });
              }

              // Marcar como cargada
              img
                .closest(".ultra-optimized-image")
                ?.setAttribute("data-loaded", "true");

              observer.unobserve(img);
            }
          });
        },
        {
          rootMargin: "50px 0px",
          threshold: 0.01,
        }
      );

      images.forEach((img) => imageObserver.observe(img));
    }
  }
</script>
