---
export interface Props {
  src: string;
  poster?: string;
  width?: number;
  height?: number;
  class?: string;
  autoplay?: boolean;
  muted?: boolean;
  loop?: boolean;
  controls?: boolean;
  preload?: 'none' | 'metadata' | 'auto';
  playsinline?: boolean;
  threshold?: number;
}

const { 
  src, 
  poster, 
  width, 
  height, 
  class: className, 
  autoplay = false, 
  muted = false, 
  loop = false, 
  controls = true,
  preload = 'metadata',
  playsinline = true,
  threshold = 0.1
} = Astro.props;

// Generar rutas optimizadas
const baseName = src.replace(/\.[^/.]+$/, '');
const optimizedBasePath = baseName.replace('/img-lumia/Videos/', '/optimized-videos/img-lumia/Videos/');

const uniqueId = Math.random().toString(36).substr(2, 9);
---

<div class="lazy-video-container" data-video-id={uniqueId}>
  <video
    id={`video-${uniqueId}`}
    width={width}
    height={height}
    class={className}
    autoplay={autoplay}
    muted={muted}
    loop={loop}
    controls={controls}
    preload={preload}
    poster={poster || `${optimizedBasePath}-poster.jpg`}
    playsinline={playsinline}
    data-src={src}
  >
    <!-- WebM -->
    <source 
      data-src={`${optimizedBasePath}.webm`} 
      type="video/webm"
    />
    
    <!-- MP4 Desktop -->
    <source 
      data-src={`${optimizedBasePath}-main.mp4`} 
      type="video/mp4"
      media="(min-width: 768px)"
    />
    
    <!-- MP4 Mobile -->
    <source 
      data-src={`${optimizedBasePath}-mobile.mp4`} 
      type="video/mp4"
      media="(max-width: 767px)"
    />
    
    <p class="video-fallback">
      Tu navegador no soporta el elemento video. 
      <a href={src} download>Descarga el video</a>.
    </p>
  </video>
  
  <!-- Overlay de carga -->
  <div class="video-loading-overlay" id={`overlay-${uniqueId}`}>
    <div class="loading-spinner"></div>
    <p>Cargando video...</p>
  </div>
</div>

<script>
  // Lazy loading para videos
  const observerOptions = {
    root: null,
    rootMargin: '50px',
    threshold: ${threshold}
  };

  const videoObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const video = entry.target;
        const videoId = video.id;
        const overlayId = `overlay-${videoId.replace('video-', '')}`;
        const overlay = document.getElementById(overlayId);
        
        // Cargar sources
        const sources = video.querySelectorAll('source[data-src]');
        sources.forEach(source => {
          source.src = source.dataset.src;
        });
        
        // Cargar video
        video.load();
        
        // Ocultar overlay cuando el video estÃ© listo
        video.addEventListener('loadeddata', () => {
          if (overlay) {
            overlay.style.opacity = '0';
            setTimeout(() => {
              overlay.style.display = 'none';
            }, 300);
          }
        });
        
        videoObserver.unobserve(video);
      }
    });
  }, observerOptions);

  // Observar todos los videos lazy
  document.addEventListener('DOMContentLoaded', () => {
    const lazyVideos = document.querySelectorAll('video[data-src]');
    lazyVideos.forEach(video => {
      videoObserver.observe(video);
    });
  });
</script>

<style>
  .lazy-video-container {
    position: relative;
    display: block;
  }
  
  video {
    max-width: 100%;
    height: auto;
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  video:hover {
    transform: translateY(-2px);
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
  }
  
  .video-loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    border-radius: 12px;
    color: white;
    transition: opacity 0.3s ease;
  }
  
  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-top: 3px solid white;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .video-fallback {
    text-align: center;
    padding: 2rem;
    background: #f8fafc;
    border-radius: 12px;
    color: #64748b;
    font-size: 0.875rem;
  }
  
  @media (max-width: 768px) {
    video {
      border-radius: 8px;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    }
  }
</style>
